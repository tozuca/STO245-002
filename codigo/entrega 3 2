def crearGrafo1(correcion):
  diccionario = {}
  for linea in correcion.index:
    if correcion["origin"][linea] not in diccionario:
      diccionario[correcion["origin"][linea]] = {
        correcion["destination"][linea]:
        (correcion["harassmentRisk"][linea]*500 + correcion["length"][linea]*0.5) / 2
      }
    else:
      diccionario[correcion["origin"][linea]][
        correcion["destination"][linea]] = (correcion["harassmentRisk"][linea]*100 + correcion["length"][linea]*0.5) / 2

    if correcion["oneway"][linea] == True:
      if correcion["destination"][linea] not in diccionario:
        diccionario[correcion["destination"][linea]] = {
          correcion["origin"][linea]:
          (correcion["harassmentRisk"][linea]*100 + correcion["length"][linea]*0.5) / 2
        }
      else:
        diccionario[correcion["destination"][linea]][
          correcion["origin"][linea]] = (correcion["harassmentRisk"][linea]*100 + correcion["length"][linea]*0.5) / 2

  return diccionario


def crearGrafo2(correcion):
  diccionario = {}
  for linea in correcion.index:
    if correcion["origin"][linea] not in diccionario:
      diccionario[correcion["origin"][linea]] = {
        correcion["destination"][linea]: correcion["harassmentRisk"][linea]
      }
    else:
      diccionario[correcion["origin"][linea]][
        correcion["destination"][linea]] = correcion["harassmentRisk"][linea]

    if correcion["oneway"][linea] == True:
      if correcion["destination"][linea] not in diccionario:
        diccionario[correcion["destination"][linea]] = {
          correcion["origin"][linea]: correcion["harassmentRisk"][linea]
        }
      else:
        diccionario[correcion["destination"][linea]][
          correcion["origin"][linea]] = correcion["harassmentRisk"][linea]

  return diccionario


def crearGrafo3(correcion):
  diccionario = {}
  for linea in correcion.index:
    if correcion["origin"][linea] not in diccionario:
      diccionario[correcion["origin"][linea]] = {
        correcion["destination"][linea]: correcion["length"][linea]
      }
    else:
      diccionario[correcion["origin"][linea]][
        correcion["destination"][linea]] = correcion["length"][linea]

    if correcion["oneway"][linea] == True:
      if correcion["destination"][linea] not in diccionario:
        diccionario[correcion["destination"][linea]] = {
          correcion["origin"][linea]: correcion["length"][linea]
        }
      else:
        diccionario[correcion["destination"][linea]][
          correcion["origin"][linea]] = correcion["length"][linea]

  return diccionario


def dijkstra(diccionario, inicial, final):
  camino_Corto = {}
  Recorrido = {}
  Nousados = diccionario
  infinito = 999999
  ruta = []
  for node in Nousados:
    camino_Corto[node] = infinito
  camino_Corto[inicial] = 0
  while Nousados:
    distancia_Minima = None
    for node in Nousados:
      if distancia_Minima is None:
        distancia_Minima = node
      if camino_Corto[node] < camino_Corto[distancia_Minima]:
        distancia_Minima = node
    opciones_Caminos = diccionario[distancia_Minima].items()

    for tempNodo, indice in opciones_Caminos:
      if indice + camino_Corto[distancia_Minima] < camino_Corto[tempNodo]:
        camino_Corto[tempNodo] = indice + camino_Corto[distancia_Minima]
        Recorrido[tempNodo] = distancia_Minima
    Nousados.pop(distancia_Minima)
  nodo_actual = final
  while nodo_actual != inicial:
    try:
      ruta.insert(0, nodo_actual)
      nodo_actual = Recorrido[nodo_actual]
    except KeyError:
      print("La ruta no es valida")
      break
  ruta.insert(0, inicial)
  if camino_Corto[final] != infinito:
    return ruta
